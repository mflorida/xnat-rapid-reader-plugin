{"version":3,"sources":["_config/server.js","_helpers/useRequest.js","_components/LoadingRequest.js","Worklists.js","Worklist.js","_components/RadReadFormWrapper.js","_components/ViewerIframe.js","ViewSession.js","_config/routes.js","NotFound.js","App.js","_helpers/serviceWorker.js","index.js"],"names":["_host","window","location","protocol","host","server","app","context","siteUrl","appUrl","useRequest","opts","toWatch","console","log","useState","response","setResponse","request","setRequest","useEffect","req","axios","then","resp","doRequest","LoadingRequest","props","status","test","className","style","maxWidth","statusText","type","role","text","Worklists","data","url","Date","now","method","width","margin","ResultSet","Result","map","item","brief_description","root_element_name","isWorkList","descParts","split","searchId","id","templateId","trim","description","href","Worklist","match","params","resultCount","length","to","RadReadFormWrapper","itemData","expt_id","templateResponse","action","paddingTop","templateBody","DATA","templateData","padding","dangerouslySetInnerHTML","__html","dompurify","sanitize","name","defaultValue","project","xnat_subjectdata_subjectid","modality","display","children","assessors","lastId","ID","items","data_fields","result","radreportFormData","populate","ViewerIframe","dataFields","VIEWER","position","top","right","bottom","left","minHeight","src","query","join","iframeSrc","title","height","border","ViewSession","routes","path","exact","page","label","searchItemIndex","searchItemsLength","transformResponse","json","JSON","parse","session_id","searchResponse","searchRequest","extractResults","extractItem","subject","parseSessionParam","parts","readerConfig","info","SessionNavButton","txt","newIndex","disabled","linkTo","btnStyle","lineHeight","float","localStorage","setItem","stringify","overflowY","itemIndex","background","zIndex","verticalAlign","borderBottom","fontSize","fontWeight","nextItem","onClick","e","preventDefault","formData","collect","xmlSpawn","genRadReadSpawnXML","sectionMap","xml","inbody","XNAT_CSRF","headers","hash","warn","Object","keys","sort","key","i","val","NotFound","App","route","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAMMA,EAAQC,OAAOC,SAASC,SAAW,KAAOF,OAAOC,SAASE,KAEnDC,EAAS,CAIlBC,IARS,QASTC,QARa,GASbH,KAASJ,EACTQ,QAASR,EAVI,GAWbS,OAAQT,EAXK,S,gBCIV,SAASU,EAAWC,EAAMC,GAE7BC,QAAQC,IAAI,cAFyB,MAILC,mBAAS,MAJJ,mBAI9BC,EAJ8B,KAIpBC,EAJoB,OAKPF,mBAAS,MALF,mBAK9BG,EAL8B,KAKrBC,EALqB,KA4BrC,OAJAC,oBAAU,YAjBQ,WAEd,IAAMC,EAAMC,IAAMX,GAElBQ,EAAWE,GAEXA,EAAIE,KAAK,SAACC,GAIN,OAHAP,EAAYO,GACZX,QAAQC,IAAI,uBACZD,QAAQC,IAAIU,GACLA,IAQXC,IACDb,EAAU,CAACA,GAAW,IAElB,CAACI,EAAUE,GC7BP,SAASQ,EAAeC,GACnC,OAAIA,EAAMN,KAAOM,EAAMN,IAAIO,SAAW,KAAKC,KAAKF,EAAMN,IAAIO,QAElD,yBAAKE,UAAU,iCAAiCC,MAAO,CAAEC,SAAU,UAC/D,yBAAKF,UAAU,eAAf,oBACA,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,UAAmCH,EAAMN,IAAIO,QAC7C,uBAAGE,UAAU,aACRH,EAAMN,IAAIY,cAQvB,yBAAKH,UAAS,0BAAqBH,EAAMO,KAAOP,EAAMO,KAAO,cAAgBC,KAAK,UAC9E,0BAAML,UAAU,WAAWH,EAAMS,MAAQ,eCsC1CC,MA1Df,SAAmBV,GAEfd,QAAQC,IAAIa,GAFS,IAaGW,EAbH,EAIO5B,EAAW,CACnC6B,IAAI,GAAD,OAAKlC,EAAOG,QAAZ,4CAAuDgC,KAAKC,OAC/DC,OAAQ,QANS,mBAId1B,EAJc,KAIJE,EAJI,KAuCrB,OACI,yBAAKY,UAAU,kBAAkBC,MAAO,CAAEY,MAAO,IAAKC,OAAQ,cAE1D,yCACE5B,GAAaA,EAASsB,KAKpB,yBAAKR,UAAU,eAnCHQ,EAoCQtB,EAASsB,MAnCxBO,WAAaP,EAAKO,UAAUC,OAAUR,EAAKO,UAAUC,OAAOC,IAAI,SAASC,GAG9E,GARZ,SAAoBA,GAChB,MAAO,oBAAoBnB,KAAKmB,EAAKC,oBAAsB,gBAAgBpB,KAAKmB,EAAKE,mBAOzEC,CAAWH,GAAO,CAElB,IAAMI,EAAYJ,EAAKC,kBAAkBI,MAAM,QAE3CC,EAAcN,EAAKO,GACnBC,GAAeJ,EAAU,IAAM,IAAIK,OACnCC,GAAeN,EAAU,IAAM,IAAIK,OAGvC,OACI,oCAEI,uBAAG3B,UAAU,4DAA4D6B,KAAI,sBAAiBL,EAAjB,YAA6BE,IAAeE,OAOzI,GAcS7C,QAAQC,IAAII,IALjB,kBAACQ,EAAD,QCkBDkC,MA/Df,SAAkBjC,GAAO,IAAD,EAEaA,EAAMkC,MAAMC,OAArCR,EAFY,EAEZA,SAAUE,EAFE,EAEFA,WAFE,EAUQ9C,EAAW,CAC/B6B,IAAI,GAAD,OAAKlC,EAAOG,QAAZ,8BAAyC8C,EAAzC,kCAA2Ed,KAAKC,OACnFC,OAAQ,QAZI,mBAUb1B,EAVa,KAsBpB,SAAS+C,EAAYzB,GAEjB,OADAzB,QAAQC,IAAI,eACJwB,GAAQA,EAAKO,WAAaP,EAAKO,UAAUC,OAC7CR,EAAKO,UAAUC,OAAOkB,OACtB,EAGR,OA7BoB,KA8BhB,yBAAKlC,UAAU,iBAETd,GAAaA,EAASsB,KAGpB,oCAEMyB,EAAY/C,EAASsB,MAGnB,oCAEI,kBAAC,IAAD,CAAU2B,GAAE,qBAAgBX,EAAhB,YAA4BE,EAA5B,cAA4CO,EAAY/C,EAASsB,UAJjF,2CALR,+C,uBC7BD,SAAS4B,EAAmBvC,GAAO,IAEtCwC,EAAyBxC,EAAzBwC,SAAUX,EAAe7B,EAAf6B,WAF2B,GAI9BW,EAASC,QAEoB1D,EAAW,CACnD6B,IAAI,kDAAD,OAAoDiB,EAApD,YACHd,OAAQ,OACTc,IAT0C,mBAMtCa,EANsC,UAyD7C,OAEI,0BAAMd,GAAG,wBAAwBe,OAAO,KAAKvC,MAAO,CAAEwC,WAAY,QAE7DF,GAAoBA,EAAiB/B,MAAQ,kBA7CtD,WACI,IAAMkC,EAAeH,EAAiB/B,KAAKmC,KAAKC,aAAarB,MAAM,UAAU,GAAGA,MAAM,WAAW,GACjG,OACI,yBACIE,GAAG,qBACHxB,MAAO,CAAE4C,QAAS,QAClBC,wBAAyB,CAAEC,OAAQC,IAAUC,SAASP,OAuCZ,MAE9C,6BAEA,2BAAOQ,KAAM,UAAW9C,KAAM,SAAU+C,aAAcd,EAASe,UAC/D,2BAAOF,KAAM,UAAW9C,KAAM,SAAU+C,aAAcd,EAASgB,6BAC/D,2BAAOH,KAAM,UAAW9C,KAAM,SAAU+C,aAAcd,EAASC,UAC/D,2BAAOY,KAAM,WAAY9C,KAAM,SAAU+C,aAAcd,EAASiB,WAChE,2BAAOJ,KAAM,gBAAiB9C,KAAM,SAAU+C,aAAczB,IAC5D,8BAAUwB,KAAM,QAASlD,UAAW,SAAUC,MAAO,CAAEsD,QAAS,QAAUJ,aAAc,OAEvFtD,EAAM2D,cAOOjB,GAAoBA,EAAiB/B,MAhD9BhB,IAAM,CACvBiB,IAAI,GAAD,OAAKlC,EAAOG,QAAZ,6BAAwC2D,EAASC,QAAjD,2DACH1B,OAAQ,QACTnB,KAAK,SAASC,GACb,OAAQA,GAAQA,EAAKc,MAAQd,EAAKc,KAAKO,WAAarB,EAAKc,KAAKO,UAAUC,OAAUtB,EAAKc,KAAKO,UAAUC,OAAS,KAGtGvB,KAAK,SAASgE,GACvB,GAAIA,EAAUvB,OAAS,EAAG,CACtB,IACIwB,EAAYD,EADAA,EAAUvB,OAAS,GACEyB,GACrCnE,IAAM,CACFiB,IAAI,GAAD,OAAKlC,EAAOG,QAAZ,6BAAwC2D,EAASC,QAAjD,sBAAsEoB,EAAtE,gBACH9C,OAAQ,QACTnB,KAAK,SAASC,GACb,GAAIA,GAAQA,EAAKc,MAAQd,EAAKc,KAAKoD,OAASlE,EAAKc,KAAKoD,MAAM,IAAMlE,EAAKc,KAAKoD,MAAM,GAAGC,YAAa,CAC9F,IAAMC,EAAS3F,OAAO4F,kBAAkBC,SAAS,yBAA0BtE,EAAKc,KAAKoD,MAAM,GAAGC,aAC9F9E,QAAQC,IAAI8E,WA+BgC,IC9CzDG,MAvCf,SAAsBpE,GAAO,IAEjBqE,EAAerE,EAAfqE,WAEFC,EAAS,SA0Bf,OAEI,yBAAK1C,GAAG,0BAA0BxB,MAZT,CACzBY,MAAO,MACPuD,SAAU,QACVC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,UAAW,MAMP,4BAAQC,IA3BhB,WACI3F,QAAQC,IAAI,aAGZ,IAAM2F,EAAS,CAAC,aAAD,OACET,EAAWd,SADb,oBAEEc,EAAWb,4BAFb,uBAGKa,EAAW5B,SAHhB,YAIN5B,KAAKC,QAEd,MAAM,GAAN,OAAUpC,EAAOG,QAAjB,YAA4ByF,EAA5B,aAAuCQ,EAAMC,KAAK,MAiBjCC,GAAaC,MAAOZ,EAAW5B,QAASzB,MAAM,OAAOkE,OAAO,OAAO9E,MAAO,CAAE+E,OAAQ,Y,MCkS9FC,IC7TFC,EAAS,CAElB,CACIC,KAAM,IACNC,OAAO,EACPC,KAAM9E,EACN+E,MAAO,aAOX,CACIH,KAAM,aACNC,OAAO,EACPC,KAAM9E,EACN+E,MAAO,aAEX,CACIH,KAAM,mCACNC,OAAO,EACPC,KAAMvD,EACNwD,MAAO,kBAEX,CACIH,KAAM,uEACNC,OAAO,EACPC,KD1BR,SAAqBxF,GAAO,IAAD,EAEgCA,EAAMkC,MAAMC,OAA7DR,EAFiB,EAEjBA,SAAU+D,EAFO,EAEPA,gBAAiBC,EAFV,EAEUA,kBAE3B9D,EAAa7B,EAAMkC,MAAMC,OAAON,WAEtC6D,GAAoBA,EANG,MAQiB3G,EAAW,CAC/C6B,IAAI,GAAD,OAAKlC,EAAOG,QAAZ,8BAAyC8C,EAAzC,kCAA2Ed,KAAKC,OACnFC,OAAQ,MACR6E,kBAAmB,SAASC,GACxB,IAAIlF,EAAqC,kBAATkF,EAAqBC,KAAKC,MAAMF,GAAQA,EAOxE,OANAlF,EAAKO,UAAUC,OAASR,EAAKO,UAAUC,OAAOC,IAAI,SAASC,GAGvD,OAFAA,EAAK2E,WAAa3E,EAAK2E,YAAc3E,EAAKoB,QAC1CpB,EAAKoB,QAAapB,EAAKoB,SAAWpB,EAAK2E,WAChC3E,IAEXnC,QAAQC,IAAIwB,GACLA,KAnBQ,mBAQhBsF,EARgB,KAQAC,EARA,KAwBnB1D,EAAW,KAEf,SAAS2D,EAAexF,GAEpB,OADAzB,QAAQC,IAAI,kBACOwB,GAAQA,EAAKO,WAAaP,EAAKO,UAAUC,OAAUR,EAAKO,UAAUC,OAAS,GAGlG,SAASiF,EAAYzF,GAKjB,OAJAzB,QAAQC,IAAI,gBACZqD,EAAmB2D,EAAexF,GAAM+E,EAAkB,IAAM,MACvDjD,QAAUD,EAASC,SAAWD,EAASwD,WAChDxD,EAAS6D,QAAU7D,EAAS6D,SAAW7D,EAASgB,2BACzChB,EAYX,SAASJ,EAAYzB,GAEjB,OADAzB,QAAQC,IAAI,eACLgH,EAAexF,GAAM0B,OAOhC,SAASiE,IACL,IAAMC,EAAQjI,OAAOkI,aAAa9H,OAAO+H,KAAK,GAAG/E,MAAM,oBACvD,MAAO,CACH6E,EAAM,IAAM,EACZA,EAAM,IAAM,EACZA,EAAM,IAAM,EACZA,EAAM,IAAM,EACZA,EAAM,IAAM,GACdxB,KAAK,KAoEX,SAAS2B,EAAiB1G,GAAO,IAErB2G,EAAkB3G,EAAlB2G,IAAKC,EAAa5G,EAAb4G,SAETnG,EAAWkG,EACXE,GAAW,EACXC,EAAM,qBAAmBnF,EAAnB,YAA+BE,EAA/B,YAA6C+E,EAA7C,YAAyDjB,GAE7DoB,EAAW,CACb/F,MAAO,MACPgG,WAAY,KAkBhB,MAfI,QAAQ9G,KAAKyG,IACbE,EAAiBD,GAAY,EAC7BnG,EAAkB,iDAClBsG,EAASE,MAAQ,SAIjBxG,EAAkB,iDAClBsG,EAASE,MAAQ,QACbL,EAAWjB,IACXmB,EAAS,aACTrG,EAAS,SAIVoG,EACH,4BAAQA,UAAQ,EAACzG,MAAO2G,GAAWtG,GAEnC,kBAAC,IAAD,CAAML,MAAO2G,EAAUzE,GAAIwE,GACvB,4BAAQ1G,MAAO,CAAEY,MAAO,SAAWP,IAoE/C,OACI,yBAAKN,UAAU,eAAeC,MAAO,CAAEa,OAAQ,IACzCgF,GAAmBA,EAAetF,KAKhC,oCACMyB,EAAY6D,EAAetF,MAGzB,oCACK+E,EAAkBtD,EAAY6D,EAAetF,OAAS+E,GAAmB,EACtE,8CAEA,yCAhNxBQ,EAActG,KAAK,SAACC,GAEhBqH,aAAaC,QAAb,mBAAiCxF,GAAYmE,KAAKsB,UAAU5E,IAE5DtD,QAAQC,IAAIU,KA8MauG,EAAYH,EAAetF,OAAS,KAOrC,yBAAKR,UAAU,YAEX,kBAAC,EAAD,CAAckE,WAAY7B,IAE1B,yBAAKZ,GAAG,eAAexB,MAAO,CAC1BY,MAAO,MACPuD,SAAU,WACVC,IAAK,QACLC,MAAO,EACPC,OAAQ,EACR2C,UAAW,SACXrE,QAAS,WAET,6BAEI,kBAtG5C,SAAoBhD,GAAO,IAEfW,EAAoBX,EAApBW,KAGF6B,GAHsBxC,EAAdsH,UAGGlB,EAAYzF,IAc7B,OAbAzB,QAAQC,IAAIqD,GAeR,4BAAQpC,MAbQ,CAChBY,MAAO,MACPkE,OAAQ,IACRjE,OAAQ,EACR+B,QAAS,SACTuB,SAAU,QACVC,IAAK,EAAGC,MAAO,EACf8C,WAAY,OACZC,OAAQ,IAOJ,6BAASrH,UAAU,WAAWC,MAAO,CAAE4C,QAAS,SAAUkC,OAAQ,GAAI8B,WAAY,OAAQS,cAAe,WACrG,yBAAKtH,UAAU,cACX,kBAAC,IAAD,CAAMmC,GAAG,cACL,2BAAG,gDAAH,eAIR,yBAAKnC,UAAU,eACX,mDAAyBuF,EAAzB,OAA8CC,IAElD,yBAAKxF,UAAU,cAGnB,6BAASC,MAAO,CAAE8E,OAAQ,IAAKjE,OAAQ,SAAU+B,QAAS,OAAQ0E,aAAc,oBAAqBH,WAAY,SAC7G,2BAAO3F,GAAG,qBAAqBxB,MAAO,CAAEY,MAAO,OAAQkE,OAAQ,OAAQyC,SAAU,OAAQC,WAAY,SACjG,2BAAOxH,MAAO,CAAE+E,OAAQ,SACxB,4BACI,8CAAmB,6CACnB,4BAAK3C,EAASiD,QAElB,4BACI,2CAAgB,6CAChB,4BAAKjD,EAASC,UAElB,4BACI,wCAAa,6CACb,4BAAKD,EAAS6D,UAElB,4BACI,wCAAa,6CACb,4BAAK7D,EAASe,eAiDM,CACI5C,KAAMsF,EAAetF,KACrB2G,UAAW5B,IAGf,kBAACnD,EAAD,CAAoBC,SAAUA,EAAUX,WAAYA,GAChD,6BAAS1B,UAAU,WAAWC,MAAO,CAAE4C,QAAS,gBAC5C,kBAAC0D,EAAD,CAAkBC,IAAI,OAAOC,SAAUlB,EAAkB,IACzD,kBAACgB,EAAD,CAAkBC,IAAI,OAAOC,SAAUlB,EAAkB,IACzD,yBAAKvF,UAAU,aACf,6BACA,kBAvNpD,SAAoBH,GAAO,IAEf4G,EAAa5G,EAAb4G,SAEJiB,EAAYjB,GAAYjB,EAAb,qBACGhE,EADH,YACeE,EADf,YAC6B+E,EAD7B,YACyCjB,GACpD,aAoDJ,OACI,kBAAC,IAAD,CAAMvF,MAnDO,CACbY,MAAO,OACPgG,WAAY,KAiDW1E,GAAIuF,EAAUC,QA9CzC,SAAoBC,GAEhBA,EAAEC,iBAEF9I,QAAQC,IAAI,WACZD,QAAQC,IAAI0I,GAGZ,IAAMI,EAAW3J,OAAO4F,kBAAkBgE,QAAQ,iBAElDhJ,QAAQC,IAAI8I,GAGZ,IAAME,EAAW7J,OAAO8J,mBAAmBH,EAASI,YAEpDnJ,QAAQC,IAAIgJ,EAASG,KAKL3I,IAAM,CAClBoB,OAAQ,OACRH,IAAI,GAAD,OAAKlC,EAAOG,QAAZ,0BAAqC2D,EAASe,QAA9C,qBAAkEf,EAAS6D,QAA3E,wBAAkG7D,EAASC,QAA3G,cACHN,OAAQ,CACJoG,OAAQ,OACRC,UAAWlC,KAEfmC,QAAS,CACL,eAAgB,YAEpB9H,KAAMwH,EAASG,MAGX1I,KAAK,SAASC,GACE,MAAhBA,EAAKI,QACLf,QAAQC,IAAI,YACZb,OAAOC,SAASmK,KAAhB,WAA2Bb,IAG3B3I,QAAQyJ,KAAK,aAQjB,4BAAQvI,MAAO,CAAEY,MAAO,SAAxB,uBA2JwC,CAAY4F,SAAUlB,EAAkB,MAIhD,2BAAOtF,MAAO,CAAEsD,QAAS,SACrB,+BACCkF,OAAOC,KAAKrG,GAAUsG,OAAO1H,IAAI,SAAC2H,EAAKC,GACpC,IAAMC,EAAMzG,EAASuG,GACrB,OACI,wBAAI5I,UAAY6I,EAAI,EAAK,OAAS,OAC9B,4BAAKD,GACL,4BAAKE,aApD7C,2CALR,kBAAClJ,EAAD,CAAgBL,IAAKwG,MClN7BT,MAAO,iBCxBAyD,MAZf,SAAkBlJ,GACd,OACI,yBAAKG,UAAU,wBAAwBC,MAAO,CAAEY,MAAO,IAAKC,OAAQ,WAC/D/B,QAAQC,IAAIa,GACb,oDACA,yBAAKG,UAAU,oBAAf,IACM7B,OAAOC,SAASyD,KADtB,sBCsBGmH,MAlBf,SAAanJ,GACT,OACI,yBAAK4B,GAAG,eACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACKyD,EAAOjE,IAAI,SAASgI,EAAOJ,GACxB,OAAII,EAAM7D,MACC,kBAAC,IAAD,CAAOA,OAAK,EAACD,KAAM8D,EAAM9D,KAAM+D,UAAWD,EAAM5D,OAEpD,kBAAC,IAAD,CAAOF,KAAM8D,EAAM9D,KAAM+D,UAAWD,EAAM5D,SAErD,kBAAC,IAAD,CAAO6D,UAAWH,QCVlBI,QACW,cAA7BhL,OAAOC,SAASgL,UAEe,UAA7BjL,OAAOC,SAASgL,UAEhBjL,OAAOC,SAASgL,SAASrH,MACvB,2DCXNsH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlK,KAAK,SAAAmK,GACjCA,EAAaC,iB","file":"static/js/main.af93b2e3.chunk.js","sourcesContent":["/*!\n * Define global constants for server configuration\n */\n\nconst _app = '/read';\nconst _context = '';\nconst _host = window.location.protocol + '//' + window.location.host;\n\nexport const server = {\n    // `context` is the context of the XNAT instance on the server\n    // if ROOT, leave as empty string, otherwise omit trailing slash\n    // '/urxnat'\n    app: _app,\n    context: _context,\n    host:    _host,\n    siteUrl: _host + _context,\n    appUrl: _host + _context + _app\n};\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n/**\n * Get data and use the response in a React hook\n * @param {Object} opts - axios config object string for GET request\n * @param {*} [toWatch] - optional variable to watch to trigger a new request\n * @returns {*[]}\n */\nexport function useRequest(opts, toWatch){\n\n    console.log('useRequest');\n\n    const [response, setResponse] = useState(null);\n    const [request, setRequest] = useState(null);\n\n    const doRequest = function(){\n\n        const req = axios(opts);\n\n        setRequest(req);\n\n        req.then((resp) => {\n            setResponse(resp);\n            console.log('useRequest:response');\n            console.log(resp);\n            return resp;\n        });\n\n        // return req;\n\n    };\n\n    useEffect(() => {\n        doRequest();\n    }, toWatch ? [toWatch] : []);\n\n    return [response, request];\n\n}\n","import React from 'react';\n\n/**\n * Generic light-colored spinner\n * @param props\n * @returns {*}\n * @constructor\n */\nexport default function LoadingRequest(props){\n    if (props.req && props.req.status && !/^2/.test(props.req.status)) {\n        return (\n            <div className=\"card text-white bg-danger mb-3\" style={{ maxWidth: '24rem' }}>\n                <div className=\"card-header\">An Error Occured</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">Status {props.req.status}</h5>\n                    <p className=\"card-text\">\n                        {props.req.statusText}\n                    </p>\n                </div>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div className={`spinner-boarder ${props.type ? props.type : 'text-light'}`} role=\"status\">\n                <span className=\"sr-only\">{props.text || 'Loading...'}</span>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { server } from './_config/server';\nimport { useRequest } from './_helpers/useRequest';\nimport LoadingRequest from './_components/LoadingRequest';\n\nfunction Worklists(props){\n\n    console.log(props);\n\n    const [response, request] = useRequest({\n        url: `${server.siteUrl}/data/search/saved?format=json&t=${Date.now()}`,\n        method: 'GET'\n    });\n\n    function isWorkList(item){\n        return /^(read|worklist)/i.test(item.brief_description) && /SessionData$/i.test(item.root_element_name);\n    }\n\n    function renderWorklist(data){\n        return (data.ResultSet && data.ResultSet.Result) ? data.ResultSet.Result.map(function(item){\n\n                // only return searches that start with 'read' that contain 'SessionData' search results\n                if (isWorkList(item)) {\n\n                    const descParts = item.brief_description.split(/[:|]/);\n\n                    let searchId    = item.id;\n                    let templateId  = (descParts[2] || '').trim();\n                    let description = (descParts[1] || '').trim();\n\n\n                    return (\n                        <>\n                            {/*<button key={`search-item-${item.id}`}>*/}\n                            <a className=\"list-group-item list-group-item-action text-white bg-dark\" href={`#/worklists/${searchId}/${templateId}`}>{description}</a>\n                            {/*</button>*/}\n                        </>\n                    );\n\n                }\n            }\n        ) : '';\n    }\n\n    return (\n        <div className=\"stored-searches\" style={{ width: 600, margin: '20px auto' }}>\n\n            <h1>Worklists</h1>\n            {!response || !response.data ? (\n\n                <LoadingRequest/>\n\n            ) : (\n                <div className=\"list-group\">\n                    {renderWorklist(response.data)}\n                    {console.log(request)}\n                </div>\n            )}\n\n        </div>\n    );\n}\n\nexport default Worklists;\n","import React from 'react';\nimport { Redirect, Link } from 'react-router-dom'\nimport { server } from './_config/server';\nimport { useRequest } from './_helpers/useRequest';\n\nfunction Worklist(props){\n\n    const { searchId, templateId } = props.match.params;\n\n    // hard-code the 'Bone Age' template for now\n    // TODO: how do we get the templateId dynamically? Include in the stored search name?\n    // let templateId = '101';\n\n    // const { resultCount } = extractData;\n\n    const [response, request] = useRequest({\n            url: `${server.siteUrl}/data/search/saved/${searchId}/results?format=json&t=${Date.now()}`,\n            method: 'GET'\n        }\n    );\n\n    // URL for this page\n    // http://10.100.100.17/read/#/worklists/xs1566791876575\n\n    // URL for data\n    // http://10.100.100.17/data/search/saved/xs1566791876575/results?format=json&t=1568745242774\n\n    function resultCount(data){\n        console.log('resultCount');\n        return (data && data.ResultSet && data.ResultSet.Result) ?\n            data.ResultSet.Result.length :\n            0;\n    }\n\n    return (\n        <div className=\"stored-search\">\n\n            {!response || !response.data ? (\n                <small>Loading...</small>\n            ) : (\n                <>\n                    {/*<h1>Stored Search <b>{response.data.ResultSet.ID}</b></h1>*/}\n                    {!resultCount(response.data) ? (\n                        <i>No results.</i>\n                    ) : (\n                        <>\n                            {/* redirect to the first item? */}\n                            <Redirect to={`/worklists/${searchId}/${templateId}/1/${resultCount(response.data)}`}/>\n                            {/*<ViewSession exptList={response.data.ResultSet.Result}/>*/}\n                            {/*<ul>*/}\n                            {/*    {response.data.ResultSet.Result.map((item, idx) => (*/}\n                            {/*        <li key={`search-item-${item.expt_id}`}>*/}\n                            {/*            <Link to={`/searches/${searchId}/${idx}`}>*/}\n                            {/*                {item.expt_id}*/}\n                            {/*            </Link>*/}\n                            {/*            /!*<a href={`${server.siteUrl}/read/#/viewer/proj=${item.xnat_subjectdata_project}/subj=${item.xnat_subjectdata_subjectid}/expt=${item.expt_id}/label=${item.label}`}>{item.label}</a>*!/*/}\n                            {/*        </li>*/}\n                            {/*    ))}*/}\n                            {/*</ul>*/}\n                        </>\n                    )}\n                </>\n            )}\n\n        </div>\n    );\n}\n\nexport default Worklist;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { server } from '../_config/server';\nimport { useRequest } from '../_helpers/useRequest';\nimport dompurify from 'dompurify';\nimport axios from 'axios';\n\nimport './RadReadFormStyles.css';\n\nexport default function RadReadFormWrapper(props){\n\n    const { itemData, templateId } = props;\n\n    const exptId = itemData.expt_id;\n\n    const [templateResponse, templateRequest] = useRequest({\n        url: `https://phpapi.rsna.org/radreport/v1/templates/${templateId}/details`,\n        method: 'GET'\n    }, templateId);\n\n    // const [dataResponse, dataRequest] = useRequest({\n    //     url: `${server.siteUrl}/data/`,\n    //     method: 'GET'\n    // }, exptId);\n\n    function FormTemplate(){\n        const templateBody = templateResponse.data.DATA.templateData.split('<body>')[1].split('</body>')[0];\n        return (\n            <div\n                id=\"read-form-template\"\n                style={{ padding: '10px' }}\n                dangerouslySetInnerHTML={{ __html: dompurify.sanitize(templateBody) }}\n            />\n        );\n    }\n\n    // populate form fields if there's assessor data stored\n    function populateForm(go){\n        if (go) {\n\n            const getAssessors = axios({\n                url: `${server.siteUrl}/data/experiments/${itemData.expt_id}/assessors?xsiType=rad:genRadiologyReadData&format=json`,\n                method: 'GET'\n            }).then(function(resp){\n                return (resp && resp.data && resp.data.ResultSet && resp.data.ResultSet.Result) ? resp.data.ResultSet.Result : [];\n            });\n\n            getAssessors.then(function(assessors){\n                if (assessors.length > 0) {\n                    let lastIndex = assessors.length - 1;\n                    let lastId    = assessors[lastIndex].ID;\n                    axios({\n                        url: `${server.siteUrl}/data/experiments/${itemData.expt_id}/assessors/${lastId}?format=json`,\n                        method: 'GET'\n                    }).then(function(resp){\n                        if (resp && resp.data && resp.data.items && resp.data.items[0] && resp.data.items[0].data_fields) {\n                            const result = window.radreportFormData.populate('#form-template-wrapper', resp.data.items[0].data_fields);\n                            console.log(result);\n                        }\n                    });\n                }\n            });\n\n        }\n    }\n\n    return (\n\n        <form id=\"form-template-wrapper\" action=\"#!\" style={{ paddingTop: '5px' }}>\n\n            {templateResponse && templateResponse.data && <FormTemplate/>}\n\n            <br/>\n\n            <input name={'project'} type={'hidden'} defaultValue={itemData.project}/>\n            <input name={'subject'} type={'hidden'} defaultValue={itemData.xnat_subjectdata_subjectid}/>\n            <input name={'expt_id'} type={'hidden'} defaultValue={itemData.expt_id}/>\n            <input name={'modality'} type={'hidden'} defaultValue={itemData.modality}/>\n            <input name={'read_template'} type={'hidden'} defaultValue={templateId}/>\n            <textarea name={'other'} className={'hidden'} style={{ display: 'none' }} defaultValue={'{}'}/>\n\n            {props.children}\n\n            {/*<section className=\"clearfix\">*/}\n            {/*    <SessionNavButton txt=\"prev\" newIndex={itemIndex - 1}/>*/}\n            {/*    <SessionNavButton txt=\"next\" newIndex={itemIndex + 1}/>*/}\n            {/*</section>*/}\n\n            {populateForm(templateResponse && templateResponse.data) && ''}\n\n        </form>\n\n    );\n\n}","import React from 'react';\nimport { server } from '../_config/server';\n\nfunction ViewerIframe(props){\n\n    const { dataFields } = props;\n\n    const VIEWER = 'VIEWER';\n\n    function iframeSrc(){\n        console.log('iframeSrc');\n        // const dataFields = extractItem(data);\n        // console.log(dataFields);\n        const query  = [\n            `projectId=${dataFields.project}`,\n            `subjectId=${dataFields.xnat_subjectdata_subjectid}`,\n            `experimentId=${dataFields.expt_id}`,\n            `t=${Date.now()}`\n        ];\n        return `${server.siteUrl}/${VIEWER}/?${query.join('&')}`\n    }\n\n    // pull this out for easier editing\n    const viewerContainerStyle = {\n        width: '70%',\n        position: 'fixed',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        minHeight: 720\n    };\n\n    return (\n\n        <div id=\"viewer-iframe-container\" style={viewerContainerStyle}>\n            <iframe src={iframeSrc()} title={dataFields.expt_id} width=\"100%\" height=\"100%\" style={{ border: 'none' }}/>\n        </div>\n\n    );\n}\n\nexport default ViewerIframe;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { server } from './_config/server';\nimport { useRequest } from './_helpers/useRequest';\nimport RadReadFormWrapper from './_components/RadReadFormWrapper';\nimport LoadingRequest from './_components/LoadingRequest';\nimport ViewerIframe from './_components/ViewerIframe';\nimport axios from 'axios';\n\nimport './ViewSession.css';\n\nfunction ViewSession(props){\n\n    let { searchId, searchItemIndex, searchItemsLength } = props.match.params;\n\n    const templateId = props.match.params.templateId;\n\n    searchItemIndex = (+searchItemIndex);\n\n    const [searchResponse, searchRequest] = useRequest({\n        url: `${server.siteUrl}/data/search/saved/${searchId}/results?format=json&t=${Date.now()}`,\n        method: 'GET',\n        transformResponse: function(json){\n            let data              = (typeof json === 'string') ? JSON.parse(json) : json;\n            data.ResultSet.Result = data.ResultSet.Result.map(function(item){\n                item.session_id = item.session_id || item.expt_id;\n                item.expt_id    = item.expt_id || item.session_id;\n                return item;\n            });\n            console.log(data);\n            return data;\n        }\n    });\n\n    let results  = [];\n    let itemData = null;\n\n    function extractResults(data){\n        console.log('extractResults');\n        return (results = (data && data.ResultSet && data.ResultSet.Result) ? data.ResultSet.Result : []);\n    }\n\n    function extractItem(data){\n        console.log('extractItem');\n        itemData         = extractResults(data)[searchItemIndex - 1] || null;\n        itemData.expt_id = itemData.expt_id || itemData.session_id;\n        itemData.subject = itemData.subject || itemData.xnat_subjectdata_subjectid;\n        return itemData;\n    }\n\n    function storeData(){\n        searchRequest.then((resp) => {\n            // extractItem(resp.data);\n            localStorage.setItem(`worklist_${searchId}`, JSON.stringify(itemData));\n            // searchItemsLength = searchResponse.data.ResultSet.Result.length;\n            console.log(resp);\n        });\n    }\n\n    function resultCount(data){\n        console.log('resultCount');\n        return extractResults(data).length;\n    }\n\n    // const [submitResponse, submitRequest] = useRequest({\n    //\n    // });\n\n    function parseSessionParam(){\n        const parts = window.readerConfig.server.info[2].split(/[/_.:$?=&+\\-*]+/);\n        return [\n            parts[4] || 0,\n            parts[1] || 0,\n            parts[5] || 0,\n            parts[2] || 0,\n            parts[3] || 0\n        ].join('-')\n    }\n\n    function SaveButton(props){\n\n        const { newIndex } = props;\n\n        let nextItem = (newIndex <= searchItemsLength) ?\n            `/worklists/${searchId}/${templateId}/${newIndex}/${searchItemsLength}` :\n            '/worklists';\n\n        const btnStyle = {\n            width: '100%',\n            lineHeight: 1.6\n        };\n\n        function handleSave(e){\n\n            e.preventDefault();\n\n            console.log('link...');\n            console.log(nextItem);\n\n            // collect the form data\n            const formData = window.radreportFormData.collect('#session-data');\n\n            console.log(formData);\n\n            // convert to XML using the 'standard' elements for generic rad read data type\n            const xmlSpawn = window.genRadReadSpawnXML(formData.sectionMap);\n\n            console.log(xmlSpawn.xml);\n\n            // return false;\n\n            // submit the XML data as a new assessor\n            const postXML = axios({\n                method: 'POST',\n                url: `${server.siteUrl}/data/projects/${itemData.project}/subjects/${itemData.subject}/experiments/${itemData.expt_id}/assessors`,\n                params: {\n                    inbody: 'true',\n                    XNAT_CSRF: parseSessionParam()\n                },\n                headers: {\n                    'Content-Type': 'text/xml'\n                },\n                data: xmlSpawn.xml\n            });\n\n            postXML.then(function(resp){\n                if (resp.status === 200) {\n                    console.log('SAVED!!!');\n                    window.location.hash = `#${nextItem}`;\n                }\n                else {\n                    console.warn('error')\n                }\n            });\n\n        }\n\n        return (\n            <Link style={btnStyle} to={nextItem} onClick={handleSave}>\n                <button style={{ width: '100%' }}>Save and Continue</button>\n            </Link>\n        )\n    }\n\n    function SessionNavButton(props){\n\n        const { txt, newIndex } = props;\n\n        let text     = txt;\n        let disabled = false;\n        let linkTo   = `/worklists/${searchId}/${templateId}/${newIndex}/${searchItemsLength}`;\n\n        const btnStyle = {\n            width: '45%',\n            lineHeight: 1.6\n        };\n\n        if (/prev/i.test(txt)) {\n            disabled       = newIndex <= 0;\n            text           = (<>&laquo; Back</>);\n            btnStyle.float = 'left';\n        }\n        else {\n            // disabled       = newIndex > searchItemsLength;\n            text           = (<>Next &raquo;</>);\n            btnStyle.float = 'right';\n            if (newIndex > searchItemsLength) {\n                linkTo = '/worklists';\n                text   = 'Done';\n            }\n        }\n\n        return disabled ? (\n            <button disabled style={btnStyle}>{text}</button>\n        ) : (\n            <Link style={btnStyle} to={linkTo}>\n                <button style={{ width: '100%' }}>{text}</button>\n            </Link>\n        );\n    }\n\n    function ViewHeader(props){\n\n        const { data, itemIndex } = props;\n\n        // this updates the `itemData` variable\n        const itemData = extractItem(data);\n        console.log(itemData);\n\n        const headerStyle = {\n            width: '30%',\n            height: 160,\n            margin: 0,\n            padding: '0 10px',\n            position: 'fixed',\n            top: 0, right: 0,\n            background: '#000',\n            zIndex: 1\n        };\n\n        return (\n\n            <header style={headerStyle}>\n\n                <section className=\"clearfix\" style={{ padding: '0 10px', height: 40, lineHeight: '40px', verticalAlign: 'middle' }}>\n                    <div className=\"float-left\">\n                        <Link to=\"/worklists\">\n                            <b><>&laquo;&nbsp;</>\n                                Worklists</b>\n                        </Link>\n                    </div>\n                    <div className=\"float-right\">\n                        <small>Viewing session #{searchItemIndex} of {searchItemsLength}</small>\n                    </div>\n                    <div className=\"clearfix\"/>\n                </section>\n\n                <section style={{ height: 120, margin: '0 10px', padding: '10px', borderBottom: '5px solid #303030', background: '#000' }}>\n                    <table id=\"session-info-table\" style={{ width: '100%', height: '100%', fontSize: '13px', fontWeight: 'bold' }}>\n                        <tbody style={{ border: 'none' }}>\n                        <tr>\n                            <th>Session Label: <>&nbsp;</></th>\n                            <td>{itemData.label}</td>\n                        </tr>\n                        <tr>\n                            <th>Session ID: <>&nbsp;</></th>\n                            <td>{itemData.expt_id}</td>\n                        </tr>\n                        <tr>\n                            <th>Subject: <>&nbsp;</></th>\n                            <td>{itemData.subject}</td>\n                        </tr>\n                        <tr>\n                            <th>Project: <>&nbsp;</></th>\n                            <td>{itemData.project}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </section>\n\n            </header>\n        );\n    }\n\n    return (\n        <div className=\"view-session\" style={{ margin: 0 }}>\n            {!searchResponse || !searchResponse.data ? (\n\n                <LoadingRequest req={searchRequest}/>\n\n            ) : (\n                <>\n                    {!resultCount(searchResponse.data) ? (\n                        <i>No results.</i>\n                    ) : (\n                        <>\n                            {searchItemIndex > resultCount(searchResponse.data) || searchItemIndex <= 0 ? (\n                                <i>Invalid Session</i>\n                            ) : (\n                                <>\n                                    {storeData()}\n                                    {extractItem(searchResponse.data) && null}\n\n                                    {/*<ViewHeader*/}\n                                    {/*    data={searchResponse.data}*/}\n                                    {/*    itemIndex={searchItemIndex}*/}\n                                    {/*/>*/}\n\n                                    <div className=\"clearfix\">\n\n                                        <ViewerIframe dataFields={itemData}/>\n\n                                        <div id=\"session-data\" style={{\n                                            width: '30%',\n                                            position: 'absolute',\n                                            top: '160px',\n                                            right: 0,\n                                            bottom: 0,\n                                            overflowY: 'scroll',\n                                            padding: '0 10px'\n                                        }}>\n                                            <div>\n\n                                                <ViewHeader\n                                                    data={searchResponse.data}\n                                                    itemIndex={searchItemIndex}\n                                                />\n\n                                                <RadReadFormWrapper itemData={itemData} templateId={templateId}>\n                                                    <section className=\"clearfix\" style={{ padding: '0 20px 30px' }}>\n                                                        <SessionNavButton txt=\"prev\" newIndex={searchItemIndex - 1}/>\n                                                        <SessionNavButton txt=\"next\" newIndex={searchItemIndex + 1}/>\n                                                        <div className=\"clearfix\"/>\n                                                        <br/>\n                                                        <SaveButton newIndex={searchItemIndex + 1}/>\n                                                    </section>\n                                                </RadReadFormWrapper>\n\n                                                <table style={{ display: 'none' }}>\n                                                    <tbody>\n                                                    {Object.keys(itemData).sort().map((key, i) => {\n                                                        const val = itemData[key];\n                                                        return (\n                                                            <tr className={(i % 2) ? 'even' : 'odd'}>\n                                                                <th>{key}</th>\n                                                                <td>{val}</td>\n                                                            </tr>\n                                                        );\n                                                    })}\n                                                    </tbody>\n                                                </table>\n                                                {/*<pre>{JSON.stringify(searchResponse.data.ResultSet.Result[searchItemIndex - 1], null, 2)}</pre>*/}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n\n        </div>\n    );\n}\n\nexport default ViewSession;\n","/*!\n * Define routes for navigation\n */\n\n// import Home from '../Home';\nimport Worklists from '../Worklists';\nimport Worklist from '../Worklist';\nimport ViewSession from '../ViewSession';\n\nexport const routes = [\n    // { path: '/login',     page: Login,     label: Login.name },\n    {\n        path: '/',\n        exact: true,\n        page: Worklists,\n        label: 'Worklists'\n    },\n    // {\n    //     path: '/home',\n    //     page: Home,\n    //     label: Home.name\n    // },\n    {\n        path: '/worklists',\n        exact: true,\n        page: Worklists,\n        label: 'Worklists'\n    },\n    {\n        path: '/worklists/:searchId/:templateId',\n        exact: true,\n        page: Worklist,\n        label: 'Search Results'\n    },\n    {\n        path: '/worklists/:searchId/:templateId/:searchItemIndex/:searchItemsLength',\n        exact: true,\n        page: ViewSession,\n        label: 'Session Data'\n    }\n    // { path: '/viewer',    page: Viewer ,   label: Viewer.name },\n    // {\n    //     exact: true,\n    //     path: '/viewer/:proj/:subj/:expt',\n    //     page: Viewer ,\n    //     label: Viewer.name\n    // },\n    // // nothing matches? ERROR!\n    // { path: '/error',  page: ErrorPage, label: 'Error' }\n];\n\n// keys to use for url hash for viewer loading\nexport const hashKeys = {\n    PROJ: 'proj=',\n    SUBJ: 'subj=',\n    EXPT: 'expt=',\n    LABEL: 'label='\n};\n","import React from 'react';\n\nfunction NotFound(props){\n    return (\n        <div className=\"not-found text-center\" style={{ width: 600, margin: '0 auto' }}>\n            {console.log(props)}\n            <h1>Didn't find ur page.</h1>\n            <div className=\"alert alert-dark\">\n                \"{window.location.href}\" does not exist\n            </div>\n        </div>\n    );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport {\n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\n// reference `routes.js` for route values\nimport { routes } from './_config/routes';\nimport NotFound from './NotFound';\n\nfunction App(props){\n    return (\n        <div id=\"app-wrapper\">\n            <HashRouter>\n                <Switch>\n                    {routes.map(function(route, i){\n                        if (route.exact) {\n                            return <Route exact path={route.path} component={route.page}/>\n                        }\n                        return <Route path={route.path} component={route.page}/>\n                    })}\n                    <Route component={NotFound}/>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './_helpers/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}