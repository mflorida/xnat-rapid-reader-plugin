{"version":3,"sources":["_config/server.js","_helpers/useRequest.js","_components/LoadingRequest.js","Worklists.js","Worklist.js","_components/RadReadFormWrapper.js","_components/ViewerIframe.js","ViewSession.js","_config/routes.js","NotFound.js","App.js","_helpers/serviceWorker.js","index.js"],"names":["_host","window","location","protocol","host","server","app","context","siteUrl","appUrl","useRequest","opts","toWatch","console","log","useState","response","setResponse","request","setRequest","useEffect","url","req","axios","then","resp","doRequest","concat","LoadingRequest","props","status","test","className","style","maxWidth","statusText","type","role","text","Worklists","data","Date","now","method","isWorkList","item","brief_description","description","root_element_name","width","margin","ResultSet","Result","map","titleParts","split","config","desc","cfg","slice","join","part","i","replace","trim","filter","forEach","key","toLowerCase","val","worklistConfig","searchId","id","templateId","label","template_id","template_url","href","Worklist","match","params","resultCount","length","to","RadReadFormWrapper","itemData","useForm","localRegex","isLocalForm","formFile","formResource","templateUrl","charAt","go","templateResponse","expt_id","action","paddingTop","templateHTML","DATA","templateData","templateBody","padding","dangerouslySetInnerHTML","__html","dompurify","sanitize","name","defaultValue","project","xnat_subjectdata_subjectid","modality","display","children","assessors","lastId","ID","items","data_fields","result","radreportFormData","populate","ViewerIframe","dataFields","VIEWER","waitForElement","selector","callback","selectedElement","counter","START","performance","END","tick","interval","_test","waiting","setInterval","called","clearInterval","querySelector","call","warn","position","top","right","bottom","left","minHeight","onLoad","e","iframe","target","document","getElementById","doc","innerDoc","contentDocument","contentWindow","readerConfig","viewer","hidePanels","panel","selected","classList","remove","removeElements","element","hideSelectors","hideToolbarTools","src","query","iframeSrc","title","height","border","ViewSession","routes","path","exact","page","searchItemIndex","searchItemsLength","transformResponse","json","JSON","parse","session_id","searchResponse","searchRequest","extractResults","extractItem","subject","parseSessionParam","parts","info","SessionNavButton","txt","newIndex","disabled","linkTo","btnStyle","lineHeight","float","localStorage","setItem","stringify","overflowY","itemIndex","background","zIndex","verticalAlign","borderBottom","fontSize","fontWeight","isLast","nextItem","onClick","preventDefault","formData","collect","xmlSpawn","genRadReadSpawnXML","sectionMap","xml","inbody","XNAT_CSRF","headers","hash","Object","keys","sort","NotFound","App","route","component","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ebe8d2f.chunk.js","sourcesContent":["/*!\n * Define global constants for server configuration\n */\n\nconst _app = '/read';\nconst _context = '';\nconst _host = window.location.protocol + '//' + window.location.host;\n\nexport const server = {\n    // `context` is the context of the XNAT instance on the server\n    // if ROOT, leave as empty string, otherwise omit trailing slash\n    // '/urxnat'\n    app: _app,\n    context: _context,\n    host:    _host,\n    siteUrl: _host + _context,\n    appUrl: _host + _context + _app\n};\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n/**\n * Get data and use the response in a React hook\n * @param {Object} opts - axios config object string for GET request\n * @param {*} [toWatch] - optional variable to watch to trigger a new request\n * @returns {*[]}\n */\nexport function useRequest(opts, toWatch){\n\n    console.log('useRequest');\n\n    const [response, setResponse] = useState(null);\n    const [request, setRequest] = useState(null);\n\n    const doRequest = function(){\n\n        if (opts.url) {\n\n            const req = axios(opts);\n\n            setRequest(req);\n\n            req.then((resp) => {\n                setResponse(resp);\n                console.log('useRequest:response');\n                console.log(resp);\n                return resp;\n            });\n\n        }\n\n    };\n\n    useEffect(() => {\n        doRequest();\n    }, toWatch ? [].concat(toWatch) : []);\n\n    return [response, request];\n\n}\n","import React from 'react';\n\n/**\n * Generic light-colored spinner\n * @param props\n * @returns {*}\n * @constructor\n */\nexport default function LoadingRequest(props){\n    if (props.req && props.req.status && !/^2/.test(props.req.status)) {\n        return (\n            <div className=\"card text-white bg-danger mb-3\" style={{ maxWidth: '24rem' }}>\n                <div className=\"card-header\">An Error Occured</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">Status {props.req.status}</h5>\n                    <p className=\"card-text\">\n                        {props.req.statusText}\n                    </p>\n                </div>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div className={`spinner-boarder ${props.type ? props.type : 'text-light'}`} role=\"status\">\n                <span className=\"sr-only\">{props.text || 'Loading...'}</span>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { server } from './_config/server';\nimport { useRequest } from './_helpers/useRequest';\nimport LoadingRequest from './_components/LoadingRequest';\n\nfunction Worklists(props){\n\n    console.log(props);\n\n    const [response, request] = useRequest({\n        url: `${server.siteUrl}/data/search/saved?format=json&t=${Date.now()}`,\n        method: 'GET'\n    });\n\n    function isWorkList(item){\n        return (/^(read|worklist)/i.test(item.brief_description) || /^(rapid reader|worklist)/i.test(item.description)) && /SessionData$/i.test(item.root_element_name);\n    }\n\n    function isRadreportTemplate(desc){\n        return /template\\s*source[:\\s]+radreport/.test(desc)\n    }\n\n    function parseDescription(desc){\n        return desc.split(/worklist/i).slice(1).join('').split(/[,]/).map(function(part, i){\n            return (part.replace(/^[\\W,]+|[\\W,]+$/g, '').trim())\n        }).filter(item => !!item);\n\n    }\n\n    function worklistConfig(item){\n\n        const cfg = {\n            isWorkList: isWorkList(item)\n        };\n\n        parseDescription(item.description).forEach(function(part, i){\n            let key = part.split(/[:=]/)[0].trim().replace(/[\\W\\s]+/, '_').toLowerCase();\n            let val = part.split(/[:=]/)[1].trim();\n            cfg[key] = val.trim();\n        });\n\n        return cfg;\n\n    }\n\n\n    function renderWorklists(data){\n        return (data.ResultSet && data.ResultSet.Result) ? data.ResultSet.Result.map(function(item){\n\n                // only return searches that start with 'read' that contain 'SessionData' search results\n                if (isWorkList(item)) {\n\n                    const titleParts = item.brief_description.split(/[:|]/);\n\n                    const config = worklistConfig(item);\n                    console.log(config);\n\n                    let searchId   = item.id;\n                    let templateId = (titleParts[2] || '').trim() || '-';\n                    let label      = (titleParts[1] || titleParts[0] || `Read Data (${item.root_element_name})`).trim();\n\n                    if (config.template_id) {\n                        templateId = config.template_id;\n                    }\n                    else if (config.template_url) {\n                        templateId = config.template_url.replace(/\\/+/g, ':');\n                    }\n\n                    return (\n                        <a className=\"list-group-item list-group-item-action text-white bg-dark\" href={`#/worklists/${searchId}/${templateId}/`}>{label}</a>\n                    );\n\n                }\n            }\n        ) : '';\n    }\n\n    return (\n        <div className=\"stored-searches\" style={{ width: 600, margin: '20px auto' }}>\n\n            <h1>Worklists</h1>\n            {!response || !response.data ? (\n\n                <LoadingRequest/>\n\n            ) : (\n                <div className=\"list-group\">\n                    {renderWorklists(response.data)}\n                    {console.log(request)}\n                </div>\n            )}\n\n        </div>\n    );\n}\n\nexport default Worklists;\n","import React from 'react';\nimport { Redirect, Link } from 'react-router-dom'\nimport { server } from './_config/server';\nimport { useRequest } from './_helpers/useRequest';\n\nfunction Worklist(props){\n\n    const { searchId, templateId } = props.match.params;\n\n    // hard-code the 'Bone Age' template for now\n    // TODO: how do we get the templateId dynamically? Include in the stored search name?\n    // let templateId = '101';\n\n    // const { resultCount } = extractData;\n\n    const [response, request] = useRequest({\n            url: `${server.siteUrl}/data/search/saved/${searchId}/results?format=json&t=${Date.now()}`,\n            method: 'GET'\n        }\n    );\n\n    // URL for this page\n    // {SITE}/read/#/worklists/xs1566791876575\n\n    // URL for data\n    // {SITE}/data/search/saved/xs1566791876575/results?format=json&t=1568745242774\n\n    function resultCount(data){\n        console.log('resultCount');\n        return (data && data.ResultSet && data.ResultSet.Result) ?\n            data.ResultSet.Result.length :\n            0;\n    }\n\n    return (\n        <div className=\"stored-search\">\n\n            {!response || !response.data ? (\n                <small>Loading...</small>\n            ) : (\n                <>\n                    {/*<h1>Stored Search <b>{response.data.ResultSet.ID}</b></h1>*/}\n                    {!resultCount(response.data) ? (\n                        <i>No results.</i>\n                    ) : (\n                        <>\n                            {/* redirect to the first item? */}\n                            <Redirect to={`/worklists/${searchId}/${templateId}/1/${resultCount(response.data)}`}/>\n                            {/*<ViewSession exptList={response.data.ResultSet.Result}/>*/}\n                            {/*<ul>*/}\n                            {/*    {response.data.ResultSet.Result.map((item, idx) => (*/}\n                            {/*        <li key={`search-item-${item.expt_id}`}>*/}\n                            {/*            <Link to={`/searches/${searchId}/${idx}`}>*/}\n                            {/*                {item.expt_id}*/}\n                            {/*            </Link>*/}\n                            {/*            /!*<a href={`${server.siteUrl}/read/#/viewer/proj=${item.xnat_subjectdata_project}/subj=${item.xnat_subjectdata_subjectid}/expt=${item.expt_id}/label=${item.label}`}>{item.label}</a>*!/*/}\n                            {/*        </li>*/}\n                            {/*    ))}*/}\n                            {/*</ul>*/}\n                        </>\n                    )}\n                </>\n            )}\n\n        </div>\n    );\n}\n\nexport default Worklist;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { server } from '../_config/server';\nimport { useRequest } from '../_helpers/useRequest';\nimport dompurify from 'dompurify';\nimport axios from 'axios';\n\nimport './RadReadFormStyles.css';\n\nexport default function RadReadFormWrapper(props){\n\n    const { itemData, templateId } = props;\n\n    // omit template id from worklist or use '-' (hyphen) or '0' to be explicit about not using a template\n    let useForm = templateId && /^[^-0]/i.test(templateId);\n\n    const localRegex = /^[*~:/]/;\n\n    // prefix template id with '*' or ':' to use a locally-stored template\n    // either as a stored XNAT resource file or other accessible html file\n    const isLocalForm = localRegex.test(templateId);\n\n    // use a form template from '/read/forms/Template_Name.html'\n    // *Template_Name\n    let formFile = `${server.appUrl}/forms/${templateId.replace(localRegex, '').replace(/\\.html$/, '')}.html`;\n    //\n    console.log(formFile);\n\n    // use a form stored as a resource on the server?\n    // use the full url with colons ':' instead of '/' in the url path\n    // :data:projects:AbCTSeg:resources:4664:files:Thoraxfoto.html\n    let formResource = (`${server.siteUrl}/${templateId.replace(localRegex, '').replace(/[:]/g, '/').replace(/\\/+/, '/')}`);\n    //\n    console.log(formResource);\n\n    let templateUrl = isLocalForm ?\n        (templateId.charAt(0) === '*' ? formFile : formResource) :\n        `https://phpapi.rsna.org/radreport/v1/templates/${templateId}/details`;\n    //\n    console.log(templateUrl);\n\n    if (/^[-0]$/i.test(templateId)) {\n        templateUrl = '';\n    }\n\n    const [templateResponse, templateRequest] = useRequest({\n        url: templateUrl,\n        method: 'GET'\n    }, templateId);\n\n    const exptId = itemData.expt_id;\n\n    // const [dataResponse, dataRequest] = useRequest({\n    //     url: `${server.siteUrl}/data/`,\n    //     method: 'GET'\n    // }, exptId);\n\n    function FormTemplate(){\n        const templateHTML = isLocalForm ? templateResponse.data : templateResponse.data.DATA.templateData;\n        const templateBody = /<body>/.test(templateHTML) ? templateHTML.split('<body>')[1].split('</body>')[0] : templateHTML;\n        return (\n            <div\n                id=\"read-form-template\"\n                style={{ padding: '10px' }}\n                dangerouslySetInnerHTML={{ __html: dompurify.sanitize(templateBody) }}\n            />\n        );\n    }\n\n    // populate form fields if there's assessor data stored\n    function populateForm(go){\n        if (useForm && go) {\n\n            const getAssessors = axios({\n                url: `${server.siteUrl}/data/experiments/${itemData.expt_id}/assessors?xsiType=rad:genRadiologyReadData&format=json`,\n                method: 'GET'\n            }).then(function(resp){\n                return (resp && resp.data && resp.data.ResultSet && resp.data.ResultSet.Result) ? resp.data.ResultSet.Result : [];\n            });\n\n            getAssessors.then(function(assessors){\n                if (assessors.length > 0) {\n                    let lastIndex = assessors.length - 1;\n                    let lastId    = assessors[lastIndex].ID;\n                    axios({\n                        url: `${server.siteUrl}/data/experiments/${itemData.expt_id}/assessors/${lastId}?format=json`,\n                        method: 'GET'\n                    }).then(function(resp){\n                        if (resp && resp.data && resp.data.items && resp.data.items[0] && resp.data.items[0].data_fields) {\n                            const result = window.radreportFormData.populate('#form-template-wrapper', resp.data.items[0].data_fields);\n                            console.log(result);\n                        }\n                    });\n                }\n            });\n\n        }\n    }\n\n    return (\n\n        <form id=\"form-template-wrapper\" action=\"#!\" style={{ paddingTop: '5px' }}>\n\n            {useForm && templateResponse && templateResponse.data && <FormTemplate/>}\n\n            <br/>\n\n            <input name={'project'} type={'hidden'} defaultValue={itemData.project}/>\n            <input name={'subject'} type={'hidden'} defaultValue={itemData.xnat_subjectdata_subjectid}/>\n            <input name={'expt_id'} type={'hidden'} defaultValue={itemData.expt_id}/>\n            <input name={'modality'} type={'hidden'} defaultValue={itemData.modality}/>\n            <input name={'read_template'} type={'hidden'} defaultValue={templateId}/>\n            <textarea name={'other'} className={'hidden'} style={{ display: 'none' }} defaultValue={'{}'}/>\n\n            {props.children}\n\n            {useForm && populateForm(templateResponse && templateResponse.data) && ''}\n\n        </form>\n\n    );\n\n}","import React from 'react';\nimport { server } from '../_config/server';\n\nfunction ViewerIframe(props){\n\n    const { dataFields } = props;\n\n    const VIEWER = 'VIEWER';\n\n    function iframeSrc(){\n        console.log('iframeSrc');\n        // const dataFields = extractItem(data);\n        // console.log(dataFields);\n        const query = [\n            `projectId=${dataFields.project}`,\n            // `subjectId=${dataFields.xnat_subjectdata_subjectid}`,\n            `experimentId=${dataFields.expt_id}`,\n            `t=${Date.now()}`\n        ];\n        return `${server.siteUrl}/${VIEWER}/?${query.join('&')}`;\n    }\n\n    // pull this out for easier editing\n    const viewerContainerStyle = {\n        width: '75%',\n        position: 'fixed',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        minHeight: 720\n    };\n\n    // call 'test' at 'interval' until it returns true\n    // then execute 'callback' -- basic but useful\n    function waiting(interval, test, callback){\n        var _test = test;\n        if (typeof test !== 'function') {\n            _test = function(){\n                return !!test;\n            };\n        }\n        var waiting = setInterval(function(){\n            if (_test()) {\n                var called = callback();\n                clearInterval(waiting);\n                return called;\n            }\n        }, interval || 1);\n        return waiting;\n    }\n\n    // wait for element to show up in the DOM\n    // then execute callback\n    function waitForElement(selector, context, callback){\n        var counter = 0;\n        var START   = performance && performance.now ? performance.now() : Date.now();\n        var END     = START + 10000; // no more than 10 seconds.\n        var WAIT    = 10;\n        var tick    = START;\n        var selectedElement;\n        waiting(WAIT, function(){\n            tick += WAIT;\n            // don't wait more than 10 seconds\n            if (tick >= END) {\n                return true;\n            }\n            if (++counter > 500) {\n                return true;\n            }\n            // window.jsdebug &&\n            console.log('waiting for element: ' + selector);\n            (selectedElement = context.querySelector(selector)) && callback && callback.call(selectedElement, selectedElement);\n            return !!selectedElement;\n        }, function(){\n            if (tick >= END || counter > 500) {\n                console.warn('can\\'t find element');\n            }\n            else {\n                // window.jsdebug &&\n                console.log('element found: ' + selector);\n            }\n        });\n    }\n\n    \n    function hidePanels(doc){\n        window.readerConfig.viewer.hidePanels.forEach(function(panel){\n            waitForElement(panel[0], doc, function(selected){\n                selected.classList.remove(panel[1]);\n            })\n        })\n    }\n\n\n    function removeElements(doc){\n        window.readerConfig.viewer.removeElements.forEach(function(element){\n            waitForElement(element, doc, function(selected){\n                selected.remove();\n            })\n        })\n    }\n\n    \n    // run this when the viewer loads\n    function hideToolbarTools(doc){\n        window.readerConfig.viewer.hideSelectors.forEach(function(selector){\n            waitForElement(selector, doc, function(selected){\n                selected.style.display = 'none'\n            });\n        });\n    }\n\n\n    function modifyViewer(e){\n\n        console.log(e);\n        console.log('loaded?');\n\n        let iframe   = e.target;\n        console.log(iframe);\n\n        // compare then re-assign\n        console.log(e.target === (iframe = document.getElementById('viewer-iframe')));\n        console.log(iframe);\n\n        let innerDoc = iframe.contentDocument || iframe.contentWindow.document;\n\n        hidePanels(innerDoc);\n        removeElements(innerDoc);\n        hideToolbarTools(innerDoc);\n\n    }\n\n\n    return (\n\n        <div id=\"viewer-container\" style={viewerContainerStyle}>\n            <iframe id=\"viewer-iframe\" onLoad={modifyViewer} src={iframeSrc()} title={dataFields.expt_id} width=\"100%\" height=\"100%\" style={{ border: 'none' }}/>\n        </div>\n\n    );\n}\n\nexport default ViewerIframe;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { server } from './_config/server';\nimport { useRequest } from './_helpers/useRequest';\nimport RadReadFormWrapper from './_components/RadReadFormWrapper';\nimport LoadingRequest from './_components/LoadingRequest';\nimport ViewerIframe from './_components/ViewerIframe';\nimport axios from 'axios';\n\nimport './ViewSession.css';\n\nfunction ViewSession(props){\n\n    let { searchId, searchItemIndex, searchItemsLength } = props.match.params;\n\n    const templateId = props.match.params.templateId;\n\n    // omit template id from worklist or use '-' (hyphen) or '0' to be explicit about not using a template\n    const useForm = templateId && !/^[-0]$/.test(templateId);\n\n    // prefix template id with '*' to use a locally-stored template - store in /public/forms\n    // const localForm = templateId.charAt(0) === '*';\n\n    searchItemIndex = (+searchItemIndex);\n\n    const [searchResponse, searchRequest] = useRequest({\n        url: `${server.siteUrl}/data/search/saved/${searchId}/results?format=json&t=${Date.now()}`,\n        method: 'GET',\n        transformResponse: function(json){\n\n            let data = (typeof json === 'string') ? JSON.parse(json) : json;\n\n            data.ResultSet.Result = data.ResultSet.Result.map(function(item){\n                item.session_id = item.session_id || item.expt_id;\n                item.expt_id    = item.expt_id || item.session_id;\n                return item;\n            });\n\n            console.log(data);\n            \n            return data;\n        }\n    });\n\n    let results  = [];\n    let itemData = null;\n\n    function extractResults(data){\n        console.log('extractResults');\n        return (results = (data && data.ResultSet && data.ResultSet.Result) ? data.ResultSet.Result : []);\n    }\n\n    function extractItem(data){\n        console.log('extractItem');\n        itemData         = extractResults(data)[searchItemIndex - 1] || null;\n        itemData.expt_id = itemData.expt_id || itemData.session_id;\n        itemData.subject = itemData.subject || itemData.xnat_subjectdata_subjectid;\n        return itemData;\n    }\n\n    function storeData(){\n        searchRequest.then((resp) => {\n            // extractItem(resp.data);\n            localStorage.setItem(`worklist_${searchId}`, JSON.stringify(itemData));\n            // searchItemsLength = searchResponse.data.ResultSet.Result.length;\n            console.log(resp);\n        });\n    }\n\n    function resultCount(data){\n        console.log('resultCount');\n        return extractResults(data).length;\n    }\n\n    // const [submitResponse, submitRequest] = useRequest({\n    //\n    // });\n\n    function parseSessionParam(){\n        const parts = window.readerConfig.server.info[2].split(/[/_.:$?=&+\\-*]+/);\n        return [\n            parts[4] || 0,\n            parts[1] || 0,\n            parts[5] || 0,\n            parts[2] || 0,\n            parts[3] || 0\n        ].join('-')\n    }\n\n    function SaveButton(props){\n\n        const { newIndex } = props;\n\n        const isLast = (newIndex > searchItemsLength);\n\n        let nextItem = !isLast ?\n            `/worklists/${searchId}/${templateId}/${newIndex}/${searchItemsLength}` :\n            '/worklists';\n\n        const btnStyle = {\n            width: '100%',\n            lineHeight: 1.6\n        };\n\n        function handleSave(e){\n\n            e.preventDefault();\n\n            console.log('link...');\n            console.log(nextItem);\n\n            // collect the form data\n            const formData = window.radreportFormData.collect('#session-data');\n\n            console.log(formData);\n\n            // convert to XML using the 'standard' elements for generic rad read data type\n            const xmlSpawn = window.genRadReadSpawnXML(formData.sectionMap);\n\n            console.log(xmlSpawn.xml);\n\n            // return false;\n\n            // submit the XML data as a new assessor\n            const postXML = axios({\n                method: 'POST',\n                url: `${server.siteUrl}/data/projects/${itemData.project}/subjects/${itemData.subject}/experiments/${itemData.expt_id}/assessors`,\n                params: {\n                    inbody: 'true',\n                    XNAT_CSRF: parseSessionParam()\n                },\n                headers: {\n                    'Content-Type': 'text/xml'\n                },\n                data: xmlSpawn.xml\n            });\n\n            postXML.then(function(resp){\n                if (resp.status === 200) {\n                    console.log('SAVED!!!');\n                    window.location.hash = `#${nextItem}`;\n                }\n                else {\n                    console.warn('error')\n                }\n            });\n\n        }\n\n        return (\n            <Link style={btnStyle} to={nextItem} onClick={handleSave}>\n                <button className=\"btn btn-primary\" style={{ width: '100%' }}>Save and {isLast ? 'Finish' : 'Continue'}</button>\n            </Link>\n        )\n    }\n\n    function SessionNavButton(props){\n\n        const { txt, newIndex } = props;\n\n        let text     = txt;\n        let disabled = false;\n        let linkTo   = `/worklists/${searchId}/${templateId}/${newIndex}/${searchItemsLength}`;\n\n        const btnStyle = {\n            width: '45%',\n            lineHeight: 1.6\n        };\n\n        if (/prev/i.test(txt)) {\n            disabled       = newIndex <= 0;\n            text           = (<>&laquo; Back</>);\n            btnStyle.float = 'left';\n        }\n        else {\n            // disabled       = newIndex > searchItemsLength;\n            text           = (<>Skip &raquo;</>);\n            btnStyle.float = 'right';\n            if (newIndex > searchItemsLength) {\n                linkTo = '/worklists';\n                text   = 'Done';\n            }\n        }\n\n        return disabled ? (\n            <button disabled style={btnStyle}>{text}</button>\n        ) : (\n            <Link style={btnStyle} to={linkTo}>\n                <button style={{ width: '100%' }}>{text}</button>\n            </Link>\n        );\n    }\n\n    function ViewHeader(props){\n\n        const { data, itemIndex } = props;\n\n        // this updates the `itemData` variable\n        const itemData = extractItem(data);\n        console.log(itemData);\n\n        const headerStyle = {\n            width: '25%',\n            height: 160,\n            margin: 0,\n            padding: '0 10px',\n            position: 'fixed',\n            top: 0, right: 0,\n            background: '#000',\n            zIndex: 1\n        };\n\n        return (\n\n            <header style={headerStyle}>\n\n                <section className=\"clearfix\" style={{ padding: '0 10px', height: 40, lineHeight: '40px', verticalAlign: 'middle' }}>\n                    <div className=\"float-left\">\n                        <Link to=\"/worklists\">\n                            <b><>&laquo;&nbsp;</>Worklists</b>\n                        </Link>\n                    </div>\n                    <div className=\"float-right\">\n                        <small>Viewing session #{searchItemIndex} of {searchItemsLength}</small>\n                    </div>\n                    <div className=\"clearfix\"/>\n                </section>\n\n                <section style={{ height: 120, margin: '0 10px', padding: '10px', borderBottom: '5px solid #303030', background: '#000' }}>\n                    <table id=\"session-info-table\" style={{ width: '100%', height: '100%', fontSize: '13px', fontWeight: 'bold' }}>\n                        <tbody style={{ border: 'none' }}>\n                        <tr>\n                            <th>Session Label: <>&nbsp;</></th>\n                            <td>{itemData.label}</td>\n                        </tr>\n                        <tr>\n                            <th>Session ID: <>&nbsp;</></th>\n                            <td>{itemData.expt_id}</td>\n                        </tr>\n                        <tr>\n                            <th>Subject: <>&nbsp;</></th>\n                            <td>{itemData.subject}</td>\n                        </tr>\n                        <tr>\n                            <th>Project: <>&nbsp;</></th>\n                            <td>{itemData.project}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </section>\n\n            </header>\n        );\n    }\n\n    return (\n        <div className=\"view-session\" style={{ margin: 0 }}>\n            {!searchResponse || !searchResponse.data ? (\n\n                <LoadingRequest req={searchRequest}/>\n\n            ) : (\n                <>\n                    {!resultCount(searchResponse.data) ? (\n                        <i>No results.</i>\n                    ) : (\n                        <>\n                            {searchItemIndex > resultCount(searchResponse.data) || searchItemIndex <= 0 ? (\n                                <i>Invalid Session</i>\n                            ) : (\n                                <>\n                                    {storeData()}\n                                    {extractItem(searchResponse.data) && null}\n\n                                    {/*<ViewHeader*/}\n                                    {/*    data={searchResponse.data}*/}\n                                    {/*    itemIndex={searchItemIndex}*/}\n                                    {/*/>*/}\n\n                                    <div className=\"clearfix\">\n\n                                        <ViewerIframe dataFields={itemData}/>\n\n                                        <div id=\"session-data\" style={{\n                                            width: '25%',\n                                            position: 'absolute',\n                                            top: '160px',\n                                            right: 0,\n                                            bottom: 0,\n                                            overflowY: 'scroll',\n                                            padding: '0 10px'\n                                        }}>\n                                            <div>\n\n                                                <ViewHeader\n                                                    data={searchResponse.data}\n                                                    itemIndex={searchItemIndex}\n                                                />\n\n                                                <RadReadFormWrapper itemData={itemData} templateId={templateId}>\n                                                    <section className=\"clearfix\" style={{ padding: '0 20px 30px' }}>\n                                                        <SessionNavButton txt=\"prev\" newIndex={searchItemIndex - 1}/>\n                                                        <SessionNavButton txt=\"next\" newIndex={searchItemIndex + 1}/>\n                                                        <div className=\"clearfix\"/>\n                                                        <br/>\n                                                        {useForm && <SaveButton itemIndex={searchItemIndex} newIndex={searchItemIndex + 1}/>}\n                                                    </section>\n                                                </RadReadFormWrapper>\n\n                                                <table style={{ display: 'none' }}>\n                                                    <tbody>\n                                                    {Object.keys(itemData).sort().map((key, i) => {\n                                                        const val = itemData[key];\n                                                        return (\n                                                            <tr className={(i % 2) ? 'even' : 'odd'}>\n                                                                <th>{key}</th>\n                                                                <td>{val}</td>\n                                                            </tr>\n                                                        );\n                                                    })}\n                                                    </tbody>\n                                                </table>\n                                                {/*<pre>{JSON.stringify(searchResponse.data.ResultSet.Result[searchItemIndex - 1], null, 2)}</pre>*/}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n\n        </div>\n    );\n}\n\nexport default ViewSession;\n","/*!\n * Define routes for navigation\n */\n\n// import Home from '../Home';\nimport Worklists from '../Worklists';\nimport Worklist from '../Worklist';\nimport ViewSession from '../ViewSession';\n\nexport const routes = [\n    // { path: '/login',     page: Login,     label: Login.name },\n    {\n        path: '/',\n        exact: true,\n        page: Worklists,\n        label: 'Worklists'\n    },\n    // {\n    //     path: '/home',\n    //     page: Home,\n    //     label: Home.name\n    // },\n    {\n        path: '/worklists',\n        exact: true,\n        page: Worklists,\n        label: 'Worklists'\n    },\n    {\n        path: '/worklists/:searchId/:templateId',\n        exact: true,\n        page: Worklist,\n        label: 'Search Results'\n    },\n    {\n        path: '/worklists/:searchId/:templateId/:searchItemIndex/:searchItemsLength',\n        exact: true,\n        page: ViewSession,\n        label: 'Session Data'\n    }\n    // { path: '/viewer',    page: Viewer ,   label: Viewer.name },\n    // {\n    //     exact: true,\n    //     path: '/viewer/:proj/:subj/:expt',\n    //     page: Viewer ,\n    //     label: Viewer.name\n    // },\n    // // nothing matches? ERROR!\n    // { path: '/error',  page: ErrorPage, label: 'Error' }\n];\n\n// keys to use for url hash for viewer loading\nexport const hashKeys = {\n    PROJ: 'proj=',\n    SUBJ: 'subj=',\n    EXPT: 'expt=',\n    LABEL: 'label='\n};\n","import React from 'react';\n\nfunction NotFound(props){\n    return (\n        <div className=\"not-found text-center\" style={{ width: 600, margin: '0 auto' }}>\n            {console.log(props)}\n            <h1>Didn't find ur page.</h1>\n            <div className=\"alert alert-dark\">\n                \"{window.location.href}\" does not exist\n            </div>\n        </div>\n    );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport {\n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\n// reference `routes.js` for route values\nimport { routes } from './_config/routes';\nimport NotFound from './NotFound';\n\nfunction App(props){\n    return (\n        <div id=\"app-wrapper\">\n            <HashRouter>\n                <Switch>\n                    {routes.map(function(route, i){\n                        if (route.exact) {\n                            return <Route exact path={route.path} component={route.page}/>\n                        }\n                        return <Route path={route.path} component={route.page}/>\n                    })}\n                    <Route component={NotFound}/>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './_helpers/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}