{"version":3,"sources":["_config/server.js","_helpers/useRequest.js","_components/LoadingSpinner.js","Worklists.js","Worklist.js","_components/RadReadFormWrapper.js","_components/ViewerIframe.js","ViewSession.js","_config/routes.js","NotFound.js","App.js","_helpers/serviceWorker.js","index.js"],"names":["_host","window","location","protocol","host","server","app","context","siteUrl","appUrl","useRequest","opts","toWatch","console","log","useState","response","setResponse","request","setRequest","useEffect","req","axios","then","resp","doRequest","LoadingSpinner","props","className","type","role","text","Worklists","data","url","Date","now","method","style","width","margin","ResultSet","Result","map","item","test","brief_description","root_element_name","isWorkList","descParts","split","searchId","id","templateId","trim","description","href","Worklist","match","params","resultCount","length","to","RadReadFormWrapper","template","templateResponse","action","templateBody","DATA","templateData","dangerouslySetInnerHTML","__html","dompurify","sanitize","ViewerIframe","dataFields","VIEWER","float","src","query","project","xnat_subjectdata_subjectid","session_id","join","iframeSrc","title","height","border","ViewSession","routes","path","exact","page","label","searchItemIndex","searchItemsLength","searchResponse","searchRequest","itemData","extractResults","extractItem","SessionNavButton","disabled","txt","newIndex","btnStyle","lineHeight","localStorage","setItem","JSON","stringify","itemIndex","verticalAlign","padding","Object","keys","sort","key","i","val","NotFound","App","route","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7936cfb5.chunk.js","sourcesContent":["/*!\n * Define global constants for server configuration\n */\n\nconst _app = '/read';\nconst _context = '';\nconst _host = window.location.protocol + '//' + window.location.host;\n\nexport const server = {\n    // `context` is the context of the XNAT instance on the server\n    // if ROOT, leave as empty string, otherwise omit trailing slash\n    // '/urxnat'\n    app: _app,\n    context: _context,\n    host:    _host,\n    siteUrl: _host + _context,\n    appUrl: _host + _context + _app\n};\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n/**\n * Get data and use the response in a React hook\n * @param {Object} opts - axios config object string for GET request\n * @returns {*[]}\n */\nexport function useRequest(opts, toWatch){\n\n    console.log('useRequest');\n\n    const [response, setResponse] = useState(null);\n    const [request, setRequest] = useState(null);\n\n    const doRequest = function(){\n\n        const req = axios(opts);\n\n        setRequest(req);\n\n        req.then((resp) => {\n            setResponse(resp);\n            console.log('useRequest:response');\n            console.log(resp);\n            return resp;\n        });\n\n        // return req;\n\n    };\n\n    useEffect(() => {\n        doRequest();\n    }, toWatch || []);\n\n    return [response, request];\n\n}\n","import React from 'react';\n\n/**\n * Generic light-colored spinner\n * @param props\n * @returns {*}\n * @constructor\n */\nexport default function LoadingSpinner(props){\n    return (\n        <div className={`spinner-boarder ${props.type ? props.type : 'text-light'}`} role=\"status\">\n            <span className=\"sr-only\">{props.text || 'Loading...'}</span>\n        </div>\n    )\n}\n","import React from 'react';\nimport { server } from './_config/server';\nimport { useRequest } from './_helpers/useRequest';\nimport LoadingSpinner from './_components/LoadingSpinner';\n\nfunction Worklists(props){\n\n    console.log(props);\n\n    const [response, request] = useRequest({\n        url: `${server.siteUrl}/data/search/saved?format=json&t=${Date.now()}`,\n        method: 'GET'\n    });\n\n    function isWorkList(item){\n        return /^(read|worklist)/i.test(item.brief_description) && /SessionData$/i.test(item.root_element_name);\n    }\n\n    function renderWorklist(data){\n        return (data.ResultSet && data.ResultSet.Result) ? data.ResultSet.Result.map((item) => {\n\n                // only return searches that start with 'read' that contain 'SessionData' search results\n                if (isWorkList(item)) {\n\n                    const descParts = item.brief_description.split(/[:|]/);\n\n                    let searchId    = item.id;\n                    let templateId  = (descParts[2] || '').trim();\n                    let description = (descParts[1] || '').trim();\n\n\n                    return (\n                        <>\n                            {/*<button key={`search-item-${item.id}`}>*/}\n                            <a className=\"list-group-item list-group-item-action text-white bg-dark\" href={`#/worklists/${searchId}/${templateId}`}>{description}</a>\n                            {/*</button>*/}\n                        </>\n                    );\n\n                }\n            }\n        ) : '';\n    }\n\n    return (\n        <div className=\"stored-searches\" style={{ width: 600, margin: '20px auto' }}>\n\n            <h1>Worklists</h1>\n            {!response || !response.data ? (\n\n                <LoadingSpinner/>\n\n            ) : (\n                <div className=\"list-group\">\n                    {renderWorklist(response.data)}\n                    {console.log(request)}\n                </div>\n            )}\n\n        </div>\n    );\n}\n\nexport default Worklists;\n","import React, { useEffect, useState, createContext } from 'react';\nimport { Redirect, Link } from 'react-router-dom'\nimport { server } from './_config/server';\nimport { useRequest } from './_helpers/useRequest';\n\nfunction Worklist(props){\n\n    const { searchId, templateId } = props.match.params;\n\n    // hard-code the 'Bone Age' template for now\n    // TODO: how do we get the templateId dynamically? Include in the stored search name?\n    // let templateId = '101';\n\n    // const { resultCount } = extractData;\n\n    const [response, request] = useRequest({\n            url: `${server.siteUrl}/data/search/saved/${searchId}/results?format=json&t=${Date.now()}`,\n            method: 'GET'\n        }\n    );\n\n    // URL for this page\n    // http://10.100.100.17/read/#/worklists/xs1566791876575\n\n    // URL for data\n    // http://10.100.100.17/data/search/saved/xs1566791876575/results?format=json&t=1568745242774\n\n    function resultCount(data){\n        console.log('resultCount');\n        return (data && data.ResultSet && data.ResultSet.Result) ?\n            data.ResultSet.Result.length :\n            0;\n    }\n\n    return (\n        <div className=\"stored-search\">\n\n            {!response || !response.data ? (\n                <small>Loading...</small>\n            ) : (\n                <>\n                    {/*<h1>Stored Search <b>{response.data.ResultSet.ID}</b></h1>*/}\n                    {!resultCount(response.data) ? (\n                        <i>No results.</i>\n                    ) : (\n                        <>\n                            {/* redirect to the first item? */}\n                            <Redirect to={`/worklists/${searchId}/${templateId}/1/${resultCount(response.data)}`}/>\n                            {/*<ViewSession exptList={response.data.ResultSet.Result}/>*/}\n                            {/*<ul>*/}\n                            {/*    {response.data.ResultSet.Result.map((item, idx) => (*/}\n                            {/*        <li key={`search-item-${item.session_id}`}>*/}\n                            {/*            <Link to={`/searches/${searchId}/${idx}`}>*/}\n                            {/*                {item.session_id}*/}\n                            {/*            </Link>*/}\n                            {/*            /!*<a href={`${server.siteUrl}/read/#/viewer/proj=${item.xnat_subjectdata_project}/subj=${item.xnat_subjectdata_subjectid}/expt=${item.session_id}/label=${item.label}`}>{item.label}</a>*!/*/}\n                            {/*        </li>*/}\n                            {/*    ))}*/}\n                            {/*</ul>*/}\n                        </>\n                    )}\n                </>\n            )}\n\n        </div>\n    );\n}\n\nexport default Worklist;\n","import React from 'react';\nimport { server } from '../_config/server';\nimport { useRequest } from '../_helpers/useRequest';\nimport dompurify from 'dompurify';\n\nimport './RadReadFormStyles.css';\n\nexport default function RadReadFormWrapper(props){\n\n    const templateId = props.template;\n\n    const [templateResponse, templateRequest] = useRequest({\n        url: `https://phpapi.rsna.org/radreport/v1/templates/${templateId}/details`,\n        method: 'GET'\n    }, templateId);\n\n    function FormTemplate(){\n        const templateBody = templateResponse.data.DATA.templateData.split('<body>')[1].split('</body>')[0];\n        return (\n            <div id=\"read-form-template\" dangerouslySetInnerHTML={{ __html: dompurify.sanitize(templateBody) }}/>\n        );\n    }\n\n    return (\n\n        <form id=\"form-template-wrapper\" action=\"#!\">\n\n            {templateResponse && templateResponse.data && <FormTemplate/>}\n\n            <br/>\n            <br/>\n            <button type=\"submit\">Save and Continue</button>\n            <br/>\n            <br/>\n        </form>\n\n    );\n\n}","import React from 'react';\nimport { server } from '../_config/server';\n\nfunction ViewerIframe(props){\n\n    const { dataFields } = props;\n\n    const VIEWER = 'VIEWER';\n\n    function iframeSrc(){\n        console.log('iframeSrc');\n        // const dataFields = extractItem(data);\n        // console.log(dataFields);\n        const query  = [\n            `projectId=${dataFields.project}`,\n            `subjectId=${dataFields.xnat_subjectdata_subjectid}`,\n            `experimentId=${dataFields.session_id}`,\n            `t=${Date.now()}`\n        ];\n        return `${server.siteUrl}/${VIEWER}/?${query.join('&')}`\n    }\n\n\n    return (\n\n        <div id=\"viewer-iframe\" style={{ width: '70%', float: 'left' }}>\n            <iframe src={iframeSrc()} title={dataFields.session_id} width=\"100%\" height=\"720\" style={{ border: 'none' }}/>\n        </div>\n\n    );\n}\n\nexport default ViewerIframe;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { server } from './_config/server';\nimport { useRequest } from './_helpers/useRequest';\nimport RadReadFormWrapper from './_components/RadReadFormWrapper';\nimport LoadingSpinner from './_components/LoadingSpinner';\nimport ViewerIframe from './_components/ViewerIframe';\n\nfunction ViewSession(props){\n\n    let { searchId, searchItemIndex, searchItemsLength } = props.match.params;\n\n    const templateId = props.match.params.templateId;\n\n    searchItemIndex = (+searchItemIndex);\n\n    const [searchResponse, searchRequest] = useRequest({\n        url: `${server.siteUrl}/data/search/saved/${searchId}/results?format=json&t=${Date.now()}`,\n        method: 'GET'\n    });\n\n    let results  = null;\n    let itemData = null;\n\n    function extractResults(data){\n        console.log('extractResults');\n        return (results = data.ResultSet.Result);\n    }\n\n    function extractItem(data){\n        console.log('extractItem');\n        return (itemData = extractResults(data)[searchItemIndex - 1]);\n    }\n\n    function storeData(){\n        searchRequest.then((resp) => {\n            // extractItem(resp.data);\n            localStorage.setItem(`worklist_${searchId}`, JSON.stringify(itemData));\n            // searchItemsLength = searchResponse.data.ResultSet.Result.length;\n            console.log(resp);\n        });\n    }\n\n    function resultCount(data){\n        console.log('resultCount');\n        return extractResults(data).length;\n    }\n\n    function SessionNavButton(props){\n\n        const { txt, newIndex } = props;\n\n        let text = txt;\n        let disabled;\n\n        const btnStyle = {\n            width: '40%',\n            lineHeight: 2\n        };\n\n        if (txt === 'Prev') {\n            disabled = newIndex <= 0;\n            text     = (<>&laquo; Prev</>)\n        }\n        else {\n            disabled = newIndex > searchItemsLength;\n            text     = (<>Next &raquo;</>)\n        }\n\n        return disabled ? (\n            <button disabled style={btnStyle}>{text}</button>\n        ) : (\n            <Link to={`/worklists/${searchId}/${templateId}/${newIndex}/${searchItemsLength}`}>\n                <button style={btnStyle}>{text}</button>\n            </Link>\n        )\n    }\n\n    function ViewHeader(props){\n\n        const { data, itemIndex } = props;\n\n        // this updates the `itemData` variable\n        const itemData = extractItem(data);\n        console.log(itemData);\n\n        return (\n\n            <header className=\"header clearfix\" style={{ margin: 20, lineHeight: 2.2, verticalAlign: 'middle' }}>\n\n                <div className=\"float-left\" style={{ width: '70%' }}>\n\n                    <Link to=\"/worklists\">\n                        <b><>&laquo;&nbsp;</>Worklists</b>\n                    </Link><>&nbsp;&nbsp;|&nbsp;&nbsp;</>\n\n                    Session Label: <b>{itemData.label}</b><>&nbsp;&nbsp;|&nbsp;&nbsp;</>\n                    Session ID: <b>{itemData.session_id}</b><>&nbsp;&nbsp;|&nbsp;&nbsp;</>\n                    Subject: <b>{itemData.xnat_subjectdata_subjectid}</b><>&nbsp;&nbsp;|&nbsp;&nbsp;</>\n                    Project: <b>{itemData.project}</b>\n\n                </div>\n                <div className=\"float-right text-right\" style={{ width: '30%' }}>\n                    <SessionNavButton txt=\"Prev\" newIndex={itemIndex - 1}/>\n                    &nbsp;\n                    <SessionNavButton txt=\"Next\" newIndex={itemIndex + 1}/>\n                </div>\n            </header>\n        )\n    }\n\n    return (\n        <div className=\"view-session\" style={{ margin: 20 }}>\n            {!searchResponse || !searchResponse.data ? (\n\n                <LoadingSpinner/>\n\n            ) : (\n                <>\n                    {!resultCount(searchResponse.data) ? (\n                        <i>No results.</i>\n                    ) : (\n                        <>\n                            {searchItemIndex > resultCount(searchResponse.data) || searchItemIndex <= 0 ? (\n                                <i>Invalid Session</i>\n                            ) : (\n                                <>\n                                    {storeData()}\n\n                                    <ViewHeader data={searchResponse.data} itemIndex={searchItemIndex}/>\n\n                                    <div className=\"clearfix\">\n\n                                        <ViewerIframe dataFields={extractItem(searchResponse.data)}/>\n\n                                        <div id=\"session-data\" style={{ width: '30%', float: 'right' }}>\n                                            <div className=\"pad pad20\" style={{ padding: 20 }}>\n                                                <div>\n                                                    <small>Viewing session #{searchItemIndex} of {searchItemsLength}</small>\n                                                </div>\n                                                <br/>\n\n                                                <RadReadFormWrapper template={templateId}/>\n\n                                                <table>\n                                                    <tbody>\n                                                    {(itemData = extractItem(searchResponse.data)) && Object.keys(itemData).sort().map((key, i) => {\n                                                        const val = itemData[key];\n                                                        return (\n                                                            <tr className={(i % 2) ? 'even' : 'odd'}>\n                                                                <th>{key}</th>\n                                                                <td>{val}</td>\n                                                            </tr>\n                                                        )\n                                                    })}\n                                                    </tbody>\n                                                </table>\n                                                {/*<pre>{JSON.stringify(searchResponse.data.ResultSet.Result[searchItemIndex - 1], null, 2)}</pre>*/}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n\n        </div>\n    );\n}\n\nexport default ViewSession;\n","/*!\n * Define routes for navigation\n */\n\n// import Home from '../Home';\nimport Worklists from '../Worklists';\nimport Worklist from '../Worklist';\nimport ViewSession from '../ViewSession';\n\nexport const routes = [\n    // { path: '/login',     page: Login,     label: Login.name },\n    {\n        path: '/',\n        exact: true,\n        page: Worklists,\n        label: 'Worklists'\n    },\n    // {\n    //     path: '/home',\n    //     page: Home,\n    //     label: Home.name\n    // },\n    {\n        path: '/worklists',\n        exact: true,\n        page: Worklists,\n        label: 'Worklists'\n    },\n    {\n        path: '/worklists/:searchId/:templateId',\n        exact: true,\n        page: Worklist,\n        label: 'Search Results'\n    },\n    {\n        path: '/worklists/:searchId/:templateId/:searchItemIndex/:searchItemsLength',\n        exact: true,\n        page: ViewSession,\n        label: 'Session Data'\n    }\n    // { path: '/viewer',    page: Viewer ,   label: Viewer.name },\n    // {\n    //     exact: true,\n    //     path: '/viewer/:proj/:subj/:expt',\n    //     page: Viewer ,\n    //     label: Viewer.name\n    // },\n    // // nothing matches? ERROR!\n    // { path: '/error',  page: ErrorPage, label: 'Error' }\n];\n\n// keys to use for url hash for viewer loading\nexport const hashKeys = {\n    PROJ: 'proj=',\n    SUBJ: 'subj=',\n    EXPT: 'expt=',\n    LABEL: 'label='\n};\n","import React from 'react';\n\nfunction NotFound(props){\n    return (\n        <div className=\"not-found text-center\" style={{ width: 600, margin: '0 auto' }}>\n            {console.log(props)}\n            <h1>Didn't find ur page.</h1>\n            <div className=\"alert alert-dark\">\n                \"{window.location.href}\" does not exist\n            </div>\n        </div>\n    );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport {\n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\n// reference `routes.js` for route values\nimport { routes } from './_config/routes';\nimport NotFound from './NotFound';\n\nfunction App(props){\n    return (\n        <div id=\"app-wrapper\">\n            <HashRouter>\n                <Switch>\n                    {routes.map(function(route, i){\n                        if (route.exact) {\n                            return <Route exact path={route.path} component={route.page}/>\n                        }\n                        return <Route path={route.path} component={route.page}/>\n                    })}\n                    <Route component={NotFound}/>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './_helpers/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}